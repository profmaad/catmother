#!/usr/bin/env ruby

require 'rubygems'
require 'catmother'

require 'pp'

input_filename = ARGV.shift

if input_filename.nil?
  puts "Need to specify input file"
  exit
end

# find longest opcode mnemonic for padding
@longest_mnemonic = CatMother::Opcode.constants.map{ |constant| constant.length }.max

def format_instruction(instruction)
  padding_length = (@longest_mnemonic-instruction.class::MNEMONIC.length)+1
  
  result = instruction.class::MNEMONIC
  result += " "*padding_length
  result += (instruction.respond_to?(:operands_to_s) ? instruction.operands_to_s.to_s : "")

  return result
end

java_class = CatMother::JavaClass.new(input_filename)
puts "Class Name: #{java_class.name}"
puts "Class File Version: #{java_class.version}"
puts "Constant Pool:"
java_class.constants.each_with_index do |constant, index|
  next if index == 0
  next if constant.nil?
  next if ((constant.tag == CatMother::JavaConstant::ConstantType::UTF8_STRING) or (constant.tag == CatMother::JavaConstant::ConstantType::NAME_AND_TYPE))
  print "\t#{index}: "
  PP::singleline_pp constant
  puts " (#{java_class.constant_to_s(index)})"
end
puts "Methods: "
java_class.methods.each do |m|
  name = java_class.constants[m.name].value
  descriptor = java_class.constants[m.descriptor].value
  puts "\t#{name}, #{descriptor}"
  
  code_attribute = m.attributes.reject {|a| a[:name] != "Code"}[0]
  code_attribute[:value].disassembly.each do |pc,opcode|
    puts "\t\t#{pc}:\t#{format_instruction(opcode)}"
  end
end
print "Attributes: "
pp java_class.attributes
